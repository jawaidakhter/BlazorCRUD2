@page "/setup/products"
@attribute [Authorize]
@inherits OwningComponentBase<ProductDataService>
@using Syncfusion.Blazor.DropDowns
<SfToast @ref="ToastObj" Title="Alert">
	<ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

<SfDialog Width="600px" @bind-Visible="@isDlgVisible" @ref="dlgForm" IsModal="true" ShowCloseIcon="true">
	<DialogTemplates>
		<Header>Product Detail</Header>
		<Content>
			<EditForm Model="@selectedObj" OnValidSubmit="@SaveCasteData">
				<DataAnnotationsValidator />
				<div class="row">
					<div class="input-field col">
						<SfComboBox DataSource="categoryList" @bind-Value="selectedObj.CategoryId" Placeholder="Category" FloatLabelType="FloatLabelType.Always">
							<ComboBoxFieldSettings Value="Id" Text="Title"></ComboBoxFieldSettings>
						</SfComboBox>
						<ValidationMessage For="@(()=>selectedObj.CategoryId)"></ValidationMessage>
					</div>
				</div>
				<div class="row">
					<div class="input-field col-2">
						<SfTextBox @bind-Value="selectedObj.SKU" Placeholder="SKU" FloatLabelType="FloatLabelType.Always"></SfTextBox>
						<ValidationMessage For="@(() => selectedObj.SKU)" />
					</div>
					<div class="input-field col-10">
						<SfTextBox @bind-Value="selectedObj.Title" Placeholder="Product Title" FloatLabelType="FloatLabelType.Always"></SfTextBox>
						<ValidationMessage For="@(() => selectedObj.Title)" />
					</div>
				</div>

				<div class="row">
					<div class="input-field col">
						<SfTextBox @bind-Value="selectedObj.Brand" Placeholder="Brand" FloatLabelType="FloatLabelType.Always"></SfTextBox>
						<ValidationMessage For="@(() => selectedObj.Brand)" />
					</div>
					<div class="input-field col">
						<SfTextBox @bind-Value="selectedObj.Company" Placeholder="Product Title" FloatLabelType="FloatLabelType.Always"></SfTextBox>
						<ValidationMessage For="@(() => selectedObj.Company)" />
					</div>
				</div>
				<div class="row">
					<div class="col">
						<SfButton IsPrimary="true">@SaveButtonText</SfButton>
					</div>
				</div>
			</EditForm>
		</Content>
	</DialogTemplates>
</SfDialog>

@if (objList == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<h1>Products</h1>
	<section class="content">
		<SfButton IsPrimary="true" CssClass="e-primary mb-2" OnClick="OpenCreateForm">Create</SfButton>
		<SfGrid DataSource="@objList" AllowFiltering="true" AllowSorting="true" @ref="Grid" AllowTextWrap="true" AllowPaging="true">
			<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
			<GridColumns>
				<GridColumn Field="Id" HeaderText="Id" AutoFit="true"></GridColumn>
				<GridColumn Field="@nameof(ProductDTO.Category)" HeaderText="Category"></GridColumn>
				<GridColumn Field="@nameof(ProductDTO.SKU)" HeaderText="SKU"></GridColumn>
				<GridColumn Field="@nameof(ProductDTO.Title)" HeaderText="Product"></GridColumn>
				<GridColumn Field="@nameof(ProductDTO.Brand)" HeaderText="Brand"></GridColumn>
				<GridColumn Field="@nameof(ProductDTO.Company)" HeaderText="Company"></GridColumn>
				<GridColumn HeaderText="Actions" AllowFiltering="false" Width="150px">
					<Template Context="ss">
						@{
							var kk = (ss as ProductDTO);
							<SfButton IsPrimary="true" CssClass="e-danger" OnClick="@(()=>DeleteRecord(kk.Id))"><span class="oi oi-trash" aria-hidden="true"></span></SfButton>
							<SfButton IsPrimary="true" CssClass="e-primary" OnClick="@(()=>OpenEditForm(kk))"><span class="oi oi-pencil" aria-hidden="true"></span></SfButton>

						}
					</Template>
				</GridColumn>
			</GridColumns>
		</SfGrid>
	</section>
}

@code {
	// AuthenticationState is available as a CascadingParameter
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }
	private SfDialog dlgForm;
	List<ProductDTO> objList;
	private bool isDlgVisible = false;
	private string SaveButtonText = "Save";
	private ProductDTO selectedObj = new ProductDTO();
	private SfToast ToastObj;
	public string ToastContent = "Unable to delete Record, Related Record(s) Exist";
	public SfGrid<ProductDTO> Grid { get; set; }
	private List<ProductCategoryDTO> categoryList { get; set; }

	protected override async Task OnInitializedAsync()
	{
		// Get the current user
		var user = (await authenticationStateTask).User;
		// Get the objList for the current user
		// We access WeatherobjListervice using @Service
		objList = await @Service.GetAll();
		categoryList = await Service.GetCategories();
	}

	private void OpenCreateForm()
	{
		selectedObj = new ProductDTO { };
		dlgForm.Show();
		SaveButtonText = "Create";
	}

	private async Task OpenEditForm(ProductDTO st)
	{
		selectedObj = await Service.GetById(st.Id);

		await dlgForm.Show();
		SaveButtonText = "Update";
	}

	private void ClearData()
	{
		selectedObj = new ProductDTO();
	}

	private async Task SaveCasteData()
	{
		var user = (await authenticationStateTask).User;
		try
		{
			await Service.Save(selectedObj, user.Identity.Name);
			objList = await Service.GetAll();
			ClearData();
			Grid.Refresh();
			await dlgForm.Hide();
		}
		catch (Exception ex)
		{

			ToastModel m = new ToastModel { Content = ex.Message, Title = "Error" };
			await ToastObj.Show(m);
		}

	}

	private async Task DeleteRecord(int Id)
	{
		var paras = new string[] { "Are you want to delete this record?" };
		var res = await JSRuntime.InvokeAsync<bool>("confirm", paras);
		if (res == false)
			return;

		try
		{
			var msg2 = await Service.Delete(Id);
			objList = await Service.GetAll();
			Grid.Refresh();
			ClearData();
		}
		catch (Exception ex)
		{
			ToastModel m = new ToastModel { Template = ex.Message, Title = "Error" };
			await ToastObj.Show(m);
		}

	}

	private void beforeOpen(Syncfusion.Blazor.Popups.BeforeOpenEventArgs args)
	{
		args.MaxHeight = null;
	}

}

